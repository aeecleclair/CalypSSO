name: Lint and format

on:
  pull_request:
    types: [opened, edited, ready_for_review, synchronize]

jobs:
  lintNext:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "yarn"

      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "yarn"

      - name: Install dependencies
        run: yarn install

      # Cache build during CI: https://nextjs.org/docs/pages/building-your-application/deploying/ci-build-caching#github-actions
      - name: Cache Next build
        uses: actions/cache@v4
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-

      - name: Install dependencies
        run: yarn install

      - name: Lint
        run: yarn lint

      - name: Format
        run: npx prettier . --check

      - name: Build
        run: CI=false yarn build # Using CI=false remove Treat warning as error that make the compilation fail

  lintPython:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      # Setup Python (faster than using Python container)
      - name: Setup Python
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.11"

      - name: Cache uv folder
        id: cache-uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-uv-${{ hashFiles('requirements-dev.txt') }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: uv pip install --system -r requirements-dev.txt

      - name: Lint and check formating with ruff
        run: |
          ruff check --output-format=github
          ruff format --check

      - name: Type checking using mypy
        run: mypy .
